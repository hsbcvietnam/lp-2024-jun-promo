'use strict';

(function () {
  // ###### UNCOMMENT THIS PORTION OF CODE IF THE PAGE HAS FORM ######
  // /* --------------------------------------------------------------------
  // |
  // | -- Tagging Events
  // |
  // ----------------------------------------------------------------------*/

  // var trackEvent = function (options, name) {
  //   // console.warn(options, name);
  //   TMS.trackEvent(options);
  // };

  // var trackView = function (options, name) {
  //   // console.warn(options, name);
  //   TMS.trackView(options);
  // };

  // $('form').on('focus', 'input, select', function (e) {

  //   var event_action = '',
  //     event_content = '';

  //   if ($(this).attr('type') === 'select-one') {
  //     event_action = "dropdown";
  //     event_content = $(this).closest('.form-group').find('select').attr('name');
  //   } else {
  //     event_action = $(this).attr('type');
  //     event_content = $(this).attr('name');
  //   }

  //   trackEvent({
  //     "page_name": utag_data.page_name + ":fill in details expanded",
  //     "event_category": "content",
  //     "event_action": 'Input ' + event_action,
  //     "event_content": event_content
  //   }, 'fields');
  // });
  // ##########################################################

  /**
  * Merge two object and deduplicate
  */
  var extend = function extend() {
    // Create a new object and
    var extended = {};
    // Merge the object into the extended object
    var merge = function merge(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          // Push each value from `obj` into `extended`
          extended[prop] = obj[prop];
        }
      }
    };

    // Loop through each object and conduct a merge
    for (var i = 0; i < arguments.length; i++) {
      merge(arguments[i]);
    }

    return extended;
  };

  /**
  * Format query string into Object
  */
  var getQueryObject = function getQueryObject(queries) {
    var queries = queries.split('&');
    var queryObject = {};

    queries.forEach(function (query) {
      var group = query.split('=');
      queryObject[decodeURIComponent(group[0])] = decodeURIComponent(group[1]);
    });

    return queryObject;
  };

  /**
  * Build query string
  */
  var buildQueryString = function buildQueryString(currentQueryObject, queryObject) {
    var finalObject = extend(currentQueryObject, queryObject);
    var queryArray = [];
    var keys = Object.keys(finalObject);
    keys.forEach(function (key, index) {
      queryArray.push(encodeURIComponent(key) + '=' + encodeURIComponent(finalObject[key]));
    });

    return queryArray.join('&');
  };

  $(function () {
    var currentSearchQuery = window.location.search;
    var currentURL = window.location.href;
    var links = document.querySelectorAll('a');

    if (currentSearchQuery.length > 0) {
      var queries = window.location.search.substring(1);
      var queryObject = getQueryObject(queries);

      Array.prototype.forEach.call(links, function (link) {
        var href = link.href;
        // ignore url with hash and empty urls
        if (!href.match(/#+/g) && href !== currentURL) {
          if (link.search.length > 0) {
            var currentQueryObject = getQueryObject(link.search.substring(1));
            link.href = link.protocol + '//' + link.host + link.pathname + '?' + buildQueryString(currentQueryObject, queryObject);
          } else {
            link.href = link.href + currentSearchQuery;
          }
        }
      });
    }
  });
})();
